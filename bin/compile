#!/bin/sh

echo "ARGS to: $0 $*"
BUILD_DIR=$1
CACHE_DIR=$2
METEOR_HOME=$BUILD_DIR/.meteor/local
PATH=$METEOR_HOME/usr/bin:$METEOR_HOME/usr/lib/meteor/bin:$PATH

METEOR_VERSION=0.7.0.1

fetch_meteor() {
  if [ -f "$METEOR_HOME/usr/bin/meteor" ] ; then
    # Skip if meteor is already fetched
    return
  fi

  eval $(curl install.meteor.com | grep '^VERSION=')
  PACKAGE=meteor_${METEOR_VERSION}-1_amd64.deb

#  echo "Fetching meteor deb package"
#  curl -o "$CACHE_DIR/$PACKAGE" "http://d3sqy0vbqsdhku.cloudfront.net/${PACKAGE}"
#  echo "`ls -l $CACHE_DIR/$PACKAGE`"
  echo 'Installing Meteor'
  curl https://install.meteor.com/ | sh || echo FAIL

#  echo "Unpacking meteor to $METEOR_HOME from $CACHE_DIR/$PACKAGE"
#  [ ! -d "$METEOR_HOME" ] && mkdir -p "$METEOR_HOME"
#  ar -p "$CACHE_DIR/$PACKAGE" data.tar.gz | tar -C "$METEOR_HOME" -zxf -
}

build() {
  ( 
    cd $BUILD_DIR
    echo "Creating scrach meteor app"
    meteor create scratch_app_$$ || echo FAIL
    echo "Copying .meteor into our app"
    mv scratch_app_$$/.meteor .; rm -rf scratch_app_$$
echo "`find . -type f`"
    echo "Building meteor bundle"
    meteor bundle $CACHE_DIR/bundle.tar.gz  || echo FAIL
    echo "Making Meteor/local/build"
    mkdir -p $BUILD_DIR/.meteor/local/build
    echo "unzipping app bundle"
    tar -zxf $CACHE_DIR/bundle.tar.gz --strip-components 1 -C $BUILD_DIR/.meteor/local/build || echo FAIL
    echo "removing bundle archive"
    rm $CACHE_DIR/bundle.tar.gz
    echo "build-pack done"
  )
}

[ ! -d $BUILD_DIR ] && mkdir $BUILD_DIR
[ ! -d $CACHE_DIR ] && mkdir $CACHE_DIR

fetch_meteor
build

echo "in meteor: $METEOR_HOME"
echo "`find $METEOR_HOME -type f -name node`"
